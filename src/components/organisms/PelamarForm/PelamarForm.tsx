// src/components/organisms/PelamarForm/PelamarForm.tsx
import React, { useState, useEffect } from 'react';
import Button from '../../atoms/Button/Button';
import Input from '../../atoms/Input/Input';

interface PelamarDisplay {
  id: string;
  nama: string;
  email: string;
  telepon: string;
  tanggalLamar: string;
}

interface PelamarFormProps {
  initialData: PelamarDisplay | null;
  onSubmit: (data: PelamarDisplay) => void;
  onCancel: () => void;
}

const PelamarForm: React.FC<PelamarFormProps> = ({
  initialData,
  onSubmit,
  onCancel
}) => {
  const [formData, setFormData] = useState<PelamarDisplay>({
    id: '',
    nama: '',
    email: '',
    telepon: '',
    tanggalLamar: new Date().toISOString().split('T')[0]
  });
  
  const [errors, setErrors] = useState<{
    nama?: string;
    email?: string;
    telepon?: string;
  }>({});
  
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  // Set initial form data if editing
  useEffect(() => {
    if (initialData) {
      setFormData(initialData);
    } else {
      // For new pelamar, ID will be generated by backend
      setFormData({
        id: '', // ID will be generated by backend
        nama: '',
        email: '',
        telepon: '',
        tanggalLamar: new Date().toISOString().split('T')[0]
      });
    }
  }, [initialData]);
  
  // Handle form input changes
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    
    // Clear error when field is updated
    if (errors[name as keyof typeof errors]) {
      setErrors(prev => ({ ...prev, [name]: undefined }));
    }
  };
  
  // Validate form
  const validateForm = () => {
    const newErrors: {
      nama?: string;
      email?: string;
      telepon?: string;
    } = {};
    
    if (!formData.nama.trim()) {
      newErrors.nama = 'Nama pelamar harus diisi';
    } else if (formData.nama.trim().length < 2) {
      newErrors.nama = 'Nama pelamar minimal 2 karakter';
    }
    
    if (!formData.email.trim()) {
      newErrors.email = 'Email harus diisi';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = 'Format email tidak valid';
    }
    
    if (!formData.telepon.trim()) {
      newErrors.telepon = 'Nomor telepon harus diisi';
    } else {
      // Clean phone number (remove non-digits)
      const cleanPhone = formData.telepon.replace(/\D/g, '');
      if (cleanPhone.length < 10 || cleanPhone.length > 15) {
        newErrors.telepon = 'Nomor telepon harus 10-15 digit';
      }
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
  
  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) return;
    
    setIsSubmitting(true);
    
    try {
      // Clean phone number before submitting
      const cleanedData = {
        ...formData,
        telepon: formData.telepon.replace(/\D/g, '') // Remove non-digits
      };
      
      await onSubmit(cleanedData);
    } catch (error) {
      console.error('Error submitting form:', error);
    } finally {
      setIsSubmitting(false);
    }
  };
  
  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div className="space-y-4">
        {/* Display ID if editing */}
        {initialData && (
          <div className="bg-gray-50 p-3 rounded-lg">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              ID Pelamar
            </label>
            <p className="text-sm text-gray-900 font-mono">{formData.id}</p>
          </div>
        )}
        
        <Input
          label="Nama Lengkap"
          id="nama"
          name="nama"
          value={formData.nama}
          onChange={handleChange}
          error={errors.nama}
          placeholder="Masukkan nama lengkap pelamar"
          required
        />
        
        <Input
          label="Email"
          id="email"
          name="email"
          type="email"
          value={formData.email}
          onChange={handleChange}
          error={errors.email}
          placeholder="contoh@email.com"
          required
        />
        
        <Input
          label="Nomor Telepon"
          id="telepon"
          name="telepon"
          value={formData.telepon}
          onChange={handleChange}
          error={errors.telepon}
          placeholder="08123456789"
          required
        />
        
        {/* Display registration date if editing */}
        {initialData && (
          <div className="bg-gray-50 p-3 rounded-lg">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Tanggal Pendaftaran
            </label>
            <p className="text-sm text-gray-900">
              {new Date(formData.tanggalLamar).toLocaleDateString('id-ID', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
              })}
            </p>
          </div>
        )}
      </div>
      
      {/* Additional info for new pelamar */}
      {!initialData && (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <div className="flex items-start">
            <div className="flex-shrink-0 pt-0.5">
              <svg className="h-5 w-5 text-blue-600" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
              </svg>
            </div>
            <div className="ml-3">
              <p className="text-sm text-blue-700">
                ID pelamar akan dibuatkan secara otomatis oleh sistem setelah data disimpan.
              </p>
            </div>
          </div>
        </div>
      )}
      
      <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200">
        <Button
          type="button"
          variant="outline"
          onClick={onCancel}
          disabled={isSubmitting}
        >
          Batal
        </Button>
        <Button
          type="submit"
          variant="primary"
          isLoading={isSubmitting}
        >
          {initialData ? 'Simpan Perubahan' : 'Tambah Pelamar'}
        </Button>
      </div>
    </form>
  );
};

export default PelamarForm;